{"version":3,"file":"static/js/138.90bb2202.chunk.js","mappings":"2QAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAEnBC,EAAe,SAAAP,GAAK,OAAIA,EAAMQ,OAAOC,WAAjB,EAEpBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACZ,EAAgBQ,IACjB,SAACN,EAAUO,GACT,IAAMI,EAAmBJ,EAAOK,oBAQhC,OANyBZ,EAASO,QAChC,SAAAM,GAAO,OACLA,EAAQC,KAAKF,oBAAoBG,SAASJ,IAC1CE,EAAQG,OAAOD,SAASR,EAFnB,GAMV,I,mBCpBUU,EAAYC,EAAAA,EAAAA,IAAH,8EAKTC,EAAQD,EAAAA,EAAAA,GAAH,sF,SCIlB,EARqB,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACtB,OAAO,SAACH,EAAD,UAAYG,IAAW,SAACD,EAAD,UAAQC,KACvC,E,oBCHYC,EAAgBH,EAAAA,EAAAA,IAAH,oGAObI,EAAOJ,EAAAA,EAAAA,EAAH,4CAIJK,EAASL,EAAAA,EAAAA,OAAH,gZCwBnB,EA9BoB,SAAC,GAAuC,IAAD,IAApCL,QAAWW,EAAyB,EAAzBA,GAAIV,EAAqB,EAArBA,KAAME,EAAe,EAAfA,OACpCS,GAAWC,EAAAA,EAAAA,MAEXvB,GAAYwB,EAAAA,EAAAA,IAAYzB,GAE9B,OACE,iCACE,UAACmB,EAAD,YACE,UAACC,EAAD,WAAOR,EAAP,QACA,SAACQ,EAAD,UAAON,QAET,SAACO,EAAD,CAAQK,QATK,kBAAMH,GAASI,EAAAA,EAAAA,IAAcL,GAA7B,EAScM,SAAU3B,EAArC,SACGA,GACC,SAAC,KAAD,CAAc4B,OAAO,KAAKC,MAAM,KAAKC,MAAM,YAE3C,aAKT,ECzBYhB,EAAYC,EAAAA,EAAAA,IAAH,uHAOTgB,EAAOhB,EAAAA,EAAAA,GAAH,2JAUJiB,EAAOjB,EAAAA,EAAAA,GAAH,yR,UCqBjB,EA5BoB,WAClB,IAAMkB,GAAiBT,EAAAA,EAAAA,IAAYlB,IAA0B,GACvDT,GAAW2B,EAAAA,EAAAA,IAAY7B,GACvBK,GAAYwB,EAAAA,EAAAA,IAAYzB,GACxBG,GAAQsB,EAAAA,EAAAA,IAAYvB,GAE1B,OACE,gCACGD,IAAcE,IAAS,SAACgC,EAAA,EAAD,CAAQC,KAAK,QACnCnC,IAAcH,EAASuC,OAAS,GAChC,SAAC,EAAD,CAAcnB,QAAQ,0BAEtB,SAAC,EAAD,UACGgB,IACC,SAACF,EAAD,UACGE,EAAeI,KAAI,SAAA3B,GAAO,OACzB,SAACsB,EAAD,WACE,SAAC,EAAD,CAAatB,QAASA,KADbA,EAAQW,GADM,UAWxC,E,8BCnCYiB,EAAUvB,EAAAA,EAAAA,IAAH,8XAiBPwB,GAAQxB,EAAAA,EAAAA,MAAH,oJAULyB,IAAQzB,EAAAA,EAAAA,GAAO0B,EAAAA,GAAP1B,CAAH,yXAqBLK,GAASL,EAAAA,EAAAA,OAAH,uZAsBb2B,GAAY3B,EAAAA,EAAAA,EAAH,uGAOF4B,GAAY,SAAC,GAAc,IAAZhC,EAAW,EAAXA,KAC1B,OACE,SAAC,KAAD,CACEA,KAAMA,EACNiC,OAAQ,SAAA3B,GAAO,OAAI,SAACyB,GAAD,UAAYzB,GAAhB,GAGpB,EC/EK4B,GAAmBC,EAAAA,KAAaC,MAAM,CAC1CpC,KAAMmC,EAAAA,KAAaE,WACnBnC,OAAQiC,EAAAA,KAAaE,aAGjBC,GAAe,SAAAC,GACnB,IAAIC,EAOJ,MALG,0HAA8DC,KAAKF,KAEpEC,EACE,yFAEGA,CACR,EAEKE,GAAiB,SAAAH,GACrB,IAAIC,EASJ,MAPG,8EAA8EC,KAC7EF,KAGFC,EACE,+DAEGA,CACR,EAEKG,GAAgB,CACpB3C,KAAM,GACNE,OAAQ,IAmEV,GAhEoB,WAClB,IAAMhB,GAAW2B,EAAAA,EAAAA,IAAY7B,GACvB2B,GAAWC,EAAAA,EAAAA,MAyBjB,OACE,0BACE,SAAC,KAAD,CACE+B,cAAeA,GACfC,SA3BgB,SAAC,EAAD,GAAsC,IAAnC5C,EAAkC,EAAlCA,KAAME,EAA4B,EAA5BA,OAAY2C,EAAgB,EAAhBA,UAEvC3D,EAAS4D,MACP,SAAA/C,GAAO,OACLA,EAAQC,KAAKF,oBAAoBiD,SACjC/C,EAAKF,oBAAoBiD,MAFpB,IAKTC,EAAAA,GAAAA,MAAA,UAAehD,EAAf,2BAA8C,CAAEiD,MAAO,YAIrD/D,EAAS4D,MAAK,SAAA/C,GAAO,OAAIA,EAAQG,SAAWA,CAAvB,IACvB8C,EAAAA,GAAAA,MAAA,eAAoB9C,EAApB,2BAAqD,CACnD+C,MAAO,aAKXtC,GAASuC,EAAAA,EAAAA,IAAW,CAAElD,KAAAA,EAAME,OAAAA,KAC5B2C,IACD,EAOKX,iBAAkBA,GAHpB,UAKE,SAAC,KAAD,CAAMiB,aAAa,MAAnB,UACE,UAACxB,EAAD,YACE,UAACC,GAAD,mBAEE,SAACC,GAAD,CACEuB,KAAK,OACLpD,KAAK,OACLqD,YAAY,aACZC,SAAUhB,MAEZ,SAACN,GAAD,CAAWhC,KAAK,aAElB,UAAC4B,GAAD,qBAEE,SAACC,GAAD,CACEuB,KAAK,MACLpD,KAAK,SACLqD,YAAY,eACZC,SAAUZ,MAEZ,SAACV,GAAD,CAAWhC,KAAK,eAElB,SAAC,GAAD,CAAQoD,KAAK,SAAb,iCAMX,ECtGYG,GAAOnD,EAAAA,EAAAA,KAAH,yWAcJC,GAAQD,EAAAA,EAAAA,GAAH,+CCLlB,GATe,SAAC,GAAkB,IAAhBoD,EAAe,EAAfA,SAChB,OACE,UAACD,GAAD,YACE,SAAC,GAAD,wBACCC,IAGN,E,WCPYrD,GAAYC,EAAAA,EAAAA,IAAH,gIAQTC,GAAQD,EAAAA,EAAAA,GAAH,2FAMLuB,GAAUvB,EAAAA,EAAAA,IAAH,qGAMPwB,GAAQxB,EAAAA,EAAAA,MAAH,yJAULyB,GAAQzB,EAAAA,EAAAA,MAAH,uRAcLqD,GAAWrD,EAAAA,EAAAA,GAAH,qDCArB,GAlCe,WACb,IAAMX,GAASoB,EAAAA,EAAAA,IAAYrB,IAAiB,GACtCN,GAAW2B,EAAAA,EAAAA,IAAY7B,GACvB2B,GAAWC,EAAAA,EAAAA,MAUjB,OACE,UAAC,GAAD,YACE,SAAC,GAAD,wBAEA,UAAC,GAAD,YACE,UAAC,GAAD,8CAEE,SAAC,GAAD,CAAOwC,KAAK,OAAOb,MAAO9C,EAAQiE,SAfrB,SAAAC,GACnB,IAAMpB,EAAQoB,EAAIC,cAAcrB,MAAMQ,OAEjB,kBAAVR,GACT5B,GAASkD,EAAAA,GAAAA,GAAiBtB,GAE7B,OAWMrD,EAASuC,OAAS,IACjB,0BACE,UAACgC,GAAD,+BACkB,0BAAOvE,EAASuC,mBAO7C,EClCc,SAASqC,KACtB,IAAMnD,GAAWC,EAAAA,EAAAA,MACXvB,GAAYwB,EAAAA,EAAAA,IAAYzB,GAM9B,OAJA2E,EAAAA,EAAAA,YAAU,WACRpD,GAASqD,EAAAA,EAAAA,MACV,GAAE,CAACrD,KAGF,iCACE,SAACsD,EAAA,EAAD,WACE,4CAEF,UAAC,GAAD,YACE,SAAC,GAAD,KACA,SAAC,GAAD,KACA,yBAAM5E,GAAa,4BAEnB,SAAC,EAAD,SAIP,C","sources":["redux/contacts/selectors.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Layout/Layout.styled.jsx","components/Layout/Layout.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    const filteredContacts = contacts.filter(\n      contact =>\n        contact.name.toLocaleLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(filter)\n    );\n\n    return filteredContacts;\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  width: 350px;\n  padding: 15px;\n`;\nexport const Title = styled.h2`\n  text-align: center;\n  font-size: 26px;\n  color: #ff0000;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Title } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Container>{message && <Title>{message}</Title>}</Container>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import styled from '@emotion/styled';\n\nexport const DataConteiner = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  margin: 0;\n  padding: 2px 10px;\n\n  font-size: 14px;\n\n  background-color: white;\n\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: red;\n    color: #fff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\nimport { Button, DataConteiner, Text } from './ContactItem.styled';\n\nconst ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(id));\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <DataConteiner>\n        <Text>{name}:</Text>\n        <Text>{number}</Text>\n      </DataConteiner>\n      <Button onClick={onDelete} disabled={isLoading}>\n        {isLoading ? (\n          <ThreeCircles height=\"20\" width=\"20\" color=\"#005BBB\" />\n        ) : (\n          'Delete'\n        )}\n      </Button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 500px;\n  height: 500px;\n  margin: 0 auto;\n  padding: 15px;\n  overflow: auto;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  padding-left: 15px;\n  padding-right: 15px;\n\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 30px;\n  align-items: center;\n  padding: 5px 10px;\n  border-radius: 5px;\n  box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 2px;\n\n  :hover {\n    background-color: rgb(81, 129, 234, 0.2);\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport Notification from '../Notification';\nimport ContactItem from '../ContactItem';\nimport { Container, Item, List } from './ContactList.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const filtredContact = useSelector(selectVisibleContacts) || '';\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      {isLoading && !error && <Loader size=\"50\" />}\n      {!isLoading && !contacts.length > 0 ? (\n        <Notification message=\"There is no contacts\" />\n      ) : (\n        <Container>\n          {filtredContact && (\n            <List>\n              {filtredContact.map(contact => (\n                <Item key={contact.id}>\n                  <ContactItem contact={contact} />\n                </Item>\n              ))}\n            </List>\n          )}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  margin: 0 auto;\n\n  width: 400px;\n  padding: 15px;\n\n  background-color: rgb(81, 129, 234, 0.7);\n  border-radius: 10px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  text-align: center;\n\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const Input = styled(Field)`\n  width: 260px;\n  padding: 5px;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n    rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n\n  ::placeholder {\n    color: #808080;\n  }\n  :focus {\n    outline: 3px solid rgb(81, 129, 234);\n\n    ::placeholder {\n      color: #ffffff;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  margin: 0;\n  padding: 5px 10px;\n\n  font-size: 16px;\n\n  background-color: #ffffff;\n\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #4bb24b;\n    color: #ffffff;\n  }\n`;\n\nconst ErrorText = styled.p`\n  max-width: 260px;\n  text-align: center;\n  font-size: 12px;\n  color: red;\n`;\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { Button, FormError, Input, Label, Wrapper } from './ContactForm.styled';\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst validateName = value => {\n  let errorMessage;\n  if (\n    !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(value)\n  ) {\n    errorMessage =\n      'Name may contain only letters, apostrophe, dash and spaces. For example Jacob Mercer.';\n  }\n  return errorMessage;\n};\n\nconst validateNumber = value => {\n  let errorMessage;\n  if (\n    !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n      value\n    )\n  ) {\n    errorMessage =\n      'Phone number must be digits and can contain spaces, dashes.';\n  }\n  return errorMessage;\n};\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const createContact = ({ name, number }, { resetForm }) => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLocaleLowerCase().trim() ===\n          name.toLocaleLowerCase().trim()\n      )\n    ) {\n      toast.error(`${name} is already in contacts`, { theme: 'colored' });\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      toast.error(`This ${number} is already in contacts`, {\n        theme: 'colored',\n      });\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={createContact}\n        validationSchema={validationSchema}\n      >\n        <Form autoComplete=\"off\">\n          <Wrapper>\n            <Label>\n              Name\n              <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Mark Twain\"\n                validate={validateName}\n              />\n              <FormError name=\"name\" />\n            </Label>\n            <Label>\n              Number\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                placeholder=\"123-456-7890\"\n                validate={validateNumber}\n              />\n              <FormError name=\"number\" />\n            </Label>\n            <Button type=\"submit\">Add contact</Button>\n          </Wrapper>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 960px;\n  height: 825px;\n  margin: 0 auto;\n  padding: 12px;\n\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px; ;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n`;\n","import { Main, Title } from './Layout.styled';\n\nconst Layout = ({ children }) => {\n  return (\n    <Main>\n      <Title>Phonebook</Title>\n      {children}\n    </Main>\n  );\n};\n\nexport default Layout;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  width: 500px;\n  padding: 15px;\n\n  border-bottom: 5px dashed rgb(81, 129, 234);\n`;\n\nexport const Title = styled.h2`\n  font-size: 28px;\n  margin-bottom: 15px;\n  text-align: center;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: flex-start;\n\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  width: 240px;\n  padding: 5px;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n    rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n\n  :focus {\n    outline: 3px solid rgb(81, 129, 234);\n  }\n`;\n\nexport const SubTitle = styled.h3`\n  color: rgb(81, 129, 234);\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectContacts } from '../../redux/contacts/selectors';\nimport { filteredContacts } from '../../redux/contacts/filterSlice';\nimport {\n  Container,\n  Input,\n  Label,\n  SubTitle,\n  Title,\n  Wrapper,\n} from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter) || '';\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    const value = evt.currentTarget.value.trim();\n\n    if (typeof value === 'string') {\n      dispatch(filteredContacts(value));\n    }\n  };\n\n  return (\n    <Container>\n      <Title>Contacts</Title>\n\n      <Wrapper>\n        <Label>\n          Find contacts by name or number\n          <Input type=\"text\" value={filter} onChange={changeFilter} />\n        </Label>\n        {contacts.length > 0 && (\n          <div>\n            <SubTitle>\n              Total contacts: <span>{contacts.length}</span>\n            </SubTitle>\n          </div>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport Layout from 'components/Layout/Layout';\nimport Filter from 'components/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>PhoneBook</title>\n      </Helmet>\n      <Layout>\n        <ContactForm />\n        <Filter />\n        <div>{isLoading && 'Request in progress...'}</div>\n\n        <ContactList />\n      </Layout>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","filterValue","selectVisibleContacts","createSelector","normalizedFilter","toLocaleLowerCase","contact","name","includes","number","Container","styled","Title","message","DataConteiner","Text","Button","id","dispatch","useDispatch","useSelector","onClick","deleteContact","disabled","height","width","color","List","Item","filtredContact","Loader","size","length","map","Wrapper","Label","Input","Field","ErrorText","FormError","render","validationSchema","yup","shape","required","validateName","value","errorMessage","test","validateNumber","initialValues","onSubmit","resetForm","find","trim","toast","theme","addContact","autoComplete","type","placeholder","validate","Main","children","SubTitle","onChange","evt","currentTarget","filteredContacts","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}