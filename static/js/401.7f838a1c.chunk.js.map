{"version":3,"file":"static/js/401.7f838a1c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Layout/Layout.styled.jsx","components/Layout/Layout.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    const filteredContacts = contacts.filter(\n      contact =>\n        contact.name.toLocaleLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(filter)\n    );\n\n    return filteredContacts;\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  width: 350px;\n  padding: 15px;\n`;\nexport const Title = styled.h2`\n  text-align: center;\n  font-size: 26px;\n  color: #ff0000;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Title } from './Notification.styled';\n\nfunction Notification({ message }) {\n  return <Container>{message && <Title>{message}</Title>}</Container>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import styled from '@emotion/styled';\n\nexport const DataConteiner = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  margin: 0;\n  padding: 2px 10px;\n\n  font-size: 14px;\n\n  background-color: white;\n\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: red;\n    color: #fff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\nimport { Button, DataConteiner, Text } from './ContactItem.styled';\n\nfunction ContactItem({ contact: { id, name, number } }) {\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(id));\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <DataConteiner>\n        <Text>{name}:</Text>\n        <Text>{number}</Text>\n      </DataConteiner>\n      <Button onClick={onDelete} disabled={isLoading}>\n        {isLoading ? (\n          <ThreeCircles height=\"20\" width=\"20\" color=\"#005BBB\" />\n        ) : (\n          'Delete'\n        )}\n      </Button>\n    </>\n  );\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 500px;\n  height: 500px;\n  margin: 0 auto;\n  padding: 15px;\n  overflow: auto;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  padding-left: 15px;\n  padding-right: 15px;\n\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 30px;\n  align-items: center;\n  padding: 5px 10px;\n  border-radius: 5px;\n  box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 2px;\n\n  :hover {\n    background-color: rgb(2, 187, 2, 0.2);\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { ProgressBar } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Wrapper>\n      <ProgressBar\n        height=\"100\"\n        width=\"300\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"#FFD500\"\n        barColor=\"#005BBB\"\n      />\n    </Wrapper>\n  );\n};\n\nexport default Loader;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport Notification from '../Notification';\nimport ContactItem from '../ContactItem';\nimport { Container, Item, List } from './ContactList.styled';\nimport Loader from 'components/Loader/Loader';\n\nfunction ContactList() {\n  const filtredContact = useSelector(selectVisibleContacts) || '';\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      {isLoading && !error && <Loader size=\"50\" />}\n      {!isLoading && !contacts.length > 0 ? (\n        <Notification message=\"There is no contacts\" />\n      ) : (\n        <Container>\n          {filtredContact && (\n            <List>\n              {filtredContact.map(contact => (\n                <Item key={contact.id}>\n                  <ContactItem contact={contact} />\n                </Item>\n              ))}\n            </List>\n          )}\n        </Container>\n      )}\n    </>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  margin: 0 auto;\n\n  width: 400px;\n  padding: 15px;\n\n  background-color: rgb(2, 187, 2, 0.2);\n  border-radius: 10px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  text-align: center;\n\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const Input = styled(Field)`\n  width: 260px;\n  padding: 5px;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n    rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n\n  ::placeholder {\n    color: #808080;\n  }\n  :focus {\n    outline: 3px solid #475ce69e;\n\n    ::placeholder {\n      color: #ffffff;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  margin: 0;\n  padding: 5px 10px;\n\n  font-size: 16px;\n\n  background-color: #ffffff;\n\n  border: none;\n  border-radius: 5px;\n  box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px,\n    rgba(6, 24, 44, 0.65) 0px 4px 6px -1px,\n    rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #4bb24b;\n    color: #ffffff;\n  }\n`;\n\nconst ErrorText = styled.p`\n  max-width: 260px;\n  text-align: center;\n  font-size: 12px;\n  color: red;\n`;\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { Button, FormError, Input, Label, Wrapper } from './ContactForm.styled';\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst validateName = value => {\n  let errorMessage;\n  if (\n    !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(value)\n  ) {\n    errorMessage =\n      'Name may contain only letters, apostrophe, dash and spaces. For example Jacob Mercer.';\n  }\n  return errorMessage;\n};\n\nconst validateNumber = value => {\n  let errorMessage;\n  if (\n    !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n      value\n    )\n  ) {\n    errorMessage =\n      'Phone number must be digits and can contain spaces, dashes.';\n  }\n  return errorMessage;\n};\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nfunction ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const createContact = ({ name, number }, { resetForm }) => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLocaleLowerCase().trim() ===\n          name.toLocaleLowerCase().trim()\n      )\n    ) {\n      toast.error(`${name} is already in contacts`, { theme: 'colored' });\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      toast.error(`This ${number} is already in contacts`, {\n        theme: 'colored',\n      });\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={createContact}\n        validationSchema={validationSchema}\n      >\n        <Form autoComplete=\"off\">\n          <Wrapper>\n            <Label>\n              Name\n              <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Mark Twain\"\n                validate={validateName}\n              />\n              <FormError name=\"name\" />\n            </Label>\n            <Label>\n              Number\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                placeholder=\"123-456-7890\"\n                validate={validateNumber}\n              />\n              <FormError name=\"number\" />\n            </Label>\n            <Button type=\"submit\">Add contact</Button>\n          </Wrapper>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  gap: 26px;\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 16px;\n\n  background-color: rgb(128, 128, 128, 0.9);\n\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px; ;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n`;\n","import { Main, Title } from './Layout.styled';\n\nconst Layout = ({ children }) => {\n  return (\n    <Main>\n      <Title>Phonebook</Title>\n      {children}\n    </Main>\n  );\n};\n\nexport default Layout;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport Layout from 'components/Layout/Layout';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>PhoneBook</title>\n      </Helmet>\n      <Layout>\n        <ContactForm />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ContactList />\n      </Layout>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","filterValue","normalizedFilter","toLocaleLowerCase","contact","name","includes","number","Container","styled","Title","message","DataConteiner","Text","Button","id","dispatch","useDispatch","useSelector","onClick","deleteContact","disabled","height","width","color","List","Item","Wrapper","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","filtredContact","size","length","map","Label","Input","Field","ErrorText","FormError","render","validationSchema","yup","shape","required","validateName","value","errorMessage","test","validateNumber","initialValues","onSubmit","resetForm","find","trim","toast","theme","addContact","autoComplete","type","placeholder","validate","Main","children","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}